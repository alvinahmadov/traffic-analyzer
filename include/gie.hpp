#ifndef TADS_GIE_HPP
#define TADS_GIE_HPP

#include <gstnvdsmeta.h>
#include <gstnvdsinfer.h>

#include "common.hpp"

/**
 * Plugin type to use for inference.
 * */
enum class GiePluginType : uint 
{
	INFER = 0,		///< nvinfer (TensorRT)
	INFER_SERVER, ///< nvinferserver (Triton inference server)
};

/**
 * Infer Processing Mode
 * */
enum class GieProcessMode
{
	PRIMARY = 1,
	SECONDARY = 2
};

/**
 * GPU Inference Engine Config
 * */
struct GieConfig : BaseConfig
{
	/**
	 * Indicates whether the primary GIE must be enabled.
	 * */
	bool enable{};
	/**
	 * Unique component ID to be assigned to the nvinfer instance.
	 * Used to identify metadata generated by the instance.
	 * */
	uint unique_id;
	/**
	 * GPU to be used by the element in case of multiple GPUs.
	 * */
	uint gpu_id{};
	/**
	 * Absolute pathname of the pre-generated serialized engine
	 * file for the mode.
	 * */
	std::string model_engine_file_path;
	/**
	 * Type of CUDA memory element is to allocate for
	 * output buffers.
	 * */
	NvBufMemoryType nvbuf_memory_type{ NvBufMemoryType::DEFAULT };
	/**
	 * Pathname of a configuration file which specifies properties
	 * for the Gst-nvinfer plugin.
	 * It may contain any of the properties described in this table
	 * except config-file itself. Properties must be defined in a
	 * group named [property].
	 * */
	std::string config_file_path;
	/**
	 * The number of frames(P.GIE)/objects(S.GIE)
	 * to be inferred together in a batch.
	 * */
	uint batch_size{ 1 };
	/**
	 * Number of consecutive batches to skip for
	 * inference.
	 * */
	uint interval{};
	/**
	 * The color of the borders for the objects of a
	 * specific class ID, specified in RGBA format.
	 * The key must be of format bbox-border-color<class-id>.
	 * This property can be identified multiple times for
	 * multiple class IDs.
	 * If this property is not identified for the class ID,
	 * the borders are not drawn for objects of that class-id.
	 * */
	NvOSD_ColorParams bbox_border_color;

	[[maybe_unused]] bool have_bg_color;
	/**
	 * The color of the boxes drawn over objects of a
	 * specific class ID, in RGBA format.
	 * The key must be of format bbox-bg-color<class-id>.
	 * This property can be used multiple times for
	 * multiple class IDs.
	 * If it is not used for a class ID, the boxes are not
	 * drawn for objects of that class ID.
	 * */
	NvOSD_ColorParams bbox_bg_color;
	/**
	 * Use preprocessed input tensors attached as metadata
	 * by nvdspreprocess plugin instead of preprocessing
	 * inside the nvinfer.
	 * */
	bool input_tensor_meta;

	[[maybe_unused]] bool override_colors;

	/**
	 * A unique ID of the GIE, on whose metadata
	 * (NvDsFrameMeta) this GIE is to operate.
	 * */
	int operate_on_gie_id;
	bool is_operate_on_gie_id_set;
	/**
	 * Class IDs of the parent GIE on which
	 * this GIE must operate.
	 * The parent GIE is specified using operate-on-gie-id.
	 * */
	std::vector<int> operate_on_classes;
	/**
	 * Filter out detected objects belonging to
	 * specified class-ids
	 * */
	std::vector<int> filter_out_classes;
	/**
	 * Pathname of the labelfile.
	 * */
	std::string label_file_path{};
	/**
	 * Plugin to use for inference.
	 * */
	GiePluginType plugin_type;

	GHashTable *bbox_border_color_table;
	GHashTable *bbox_bg_color_table;
	bool is_batch_size_set;
	bool is_interval_set;
	bool is_unique_id_set;
	bool is_gpu_id_set;

	uint frame_size;
	bool is_frame_size_set;
	uint hop_size;
	bool is_hop_size_set;
	uint n_labels;
	uint *n_label_outputs;
	char ***labels;

	std::string raw_output_directory;
	gulong file_write_frame_num;

	char *tag;
};

#endif // TADS_GIE_HPP
